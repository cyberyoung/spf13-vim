set wrap
set autoread

nnoremap <buffer> <CR> 0ye<C-W>w:tag <C-R>"<CR>
noremap <silent> <F11> <ESC><ESC>:hide previous <CR>
noremap <silent> <F12> <Esc><Esc>:hide next<CR>

"colorscheme solarized
"let g:solarized_termtrans=1

"Bundle
UnBundle 'MarcWeber/vim-addon-mw-utils'
UnBundle 'tomtom/tlib_vim'
UnBundle 'tpope/vim-repeat'
UnBundle 'osyo-manga/vim-over'
UnBundle 'kana/vim-textobj-user'
UnBundle 'kana/vim-textobj-indent'

UnBundle 'honza/vim-snippets'


"---------------------------------------
" plugins
"---------------------------------------

"---------------------------------------
"" vim-airline
"---------------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

"---------------------------------------
"" c.vim
"---------------------------------------
let g:C_AuthorName      = 'cyberyoung'
let g:C_AuthorRef       = 'Yang Li'
let g:C_Email           = 'pku.liyang@gmail.com'
let g:C_Company         = 'KISS'


"---------------------------------------
"" TagList
"---------------------------------------
map <leader>cd  :cd %:p:h<cr>
map <Leader>tag <leader>cd:!ctags -R --fields=+lS<cr>
set tags=tags;
noremap <silent> <F10>  <Esc><Esc>:Tlist<CR>
inoremap <silent> <F10>  <Esc><Esc>:Tlist<CR>

let tlist_make_settings  = 'make;m:makros;t:targets'
let tlist_qmake_settings = 'qmake;t:SystemVariables'
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
nmap tl :TlistToggle<CR>

if has("autocmd")
	" ----------  qmake : set file type for *.pro  ----------
	autocmd BufNewFile,BufRead *.pro  set filetype=qmake
endif " has("autocmd")

"---------------------------------------
"" Nerdtree
"---------------------------------------
"autocmd vimenter * NERDTree
let g:NERDTree_title="[NERDTree]"
function! NERDTree_Start()
    exec 'NERDTree'
endfunction
function! NERDTree_IsValid()
    return 1
endfunction

"---------------------------------------
"" WinManager
"---------------------------------------
let g:winManagerWidth =50
let g:winManagerWindowLayout = "FileExplorer,BufExplorer|TagList"
"let g:winManagerWindowLayout = "NERDTree|TagList"
nmap wm :WMToggle<cr>

"---------------------------------------
"" cscope
"---------------------------------------
:set cscopequickfix=s-,c-,d-,i-,t-,e-
"nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
"nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

"---------------------------------------
"" jedi-vim
"---------------------------------------
" to get help :help jedi-vim
" please read chapter 5 first
let g:jedi#completions_command = "<C-N>"
" Add the virtualenv's site-packages to vim path
if has('python')
py << EOF
from os.path import expanduser
import os.path
import sys
home = expanduser("~")
sys.path.insert(0, '%s/src/work/joudou/Backend/_9data/' %(home))
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, os.path.join(project_base_dir, 'lib', 'python%d.%d' % sys.version_info[:2], 'site-packages'))
EOF
endif
let g:jedi#use_tabs_not_buffers=0
"let g:jedi#use_splits_not_buffers='left'

" multi-encoding setting
if has("multi_byte")
  "set bomb
  set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,sjis,euc-kr,ucs-2le,latin1
  " CJK environment detection and corresponding setting
  if v:lang =~ "^zh_CN"
    " Use cp936 to support GBK, euc-cn == gb2312
    set encoding=cp936
    set termencoding=cp936
    set fileencoding=cp936
  elseif v:lang =~ "^zh_TW"
    " cp950, big5 or euc-tw
    " Are they equal to each other?
    set encoding=big5
    set termencoding=big5
    set fileencoding=big5
  elseif v:lang =~ "^ko"
    " Copied from someone's dotfile, untested
    set encoding=euc-kr
    set termencoding=euc-kr
    set fileencoding=euc-kr
  elseif v:lang =~ "^ja_JP"
    " Copied from someone's dotfile, untested
    set encoding=euc-jp
    set termencoding=euc-jp
    set fileencoding=euc-jp
  endif
  " Detect UTF-8 locale, and replace CJK setting if needed
  if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
    set encoding=utf-8
    set termencoding=utf-8
    set fileencoding=utf-8
  endif
else
  echoerr "Sorry, this version of (g)vim was not compiled with multi_byte"
endif

